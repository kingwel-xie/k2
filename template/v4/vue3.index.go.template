<template>
  <div>
    <BasicTable @register="registerTable">
      <template #toolbar>
        <a-button
          v-auth="'{{.PackageName}}:{{.BusinessName}}:add'"
          type="primary"
          preIcon="ant-design:file-add-outlined"
          @click="handleCreate"
        >
          {{ `{{ t('common.addText') }}` }}
        </a-button>
        <Dropdown
          v-if="{{- if (.HasExport) }}true{{- else -}}false{{- end -}}"
          :dropMenuList="[
            {
              icon: 'ant-design:select-outlined',
              text: '选中项',
              event: 'selected',
              disabled: !hasSelected,
            },
            {
              icon: 'ant-design:profile-outlined',
              text: '当前列表',
              event: 'current',
            },
            {
              icon: 'ant-design:carry-out-outlined',
              text: '满足条件全部',
              event: 'all',
              popConfirm: {
                title: '是否导出满足当前查询条件的数据项（最多10000项）?',
                confirm: handleExport.bind(null, 'all'),
              },
            },
          ]"
          :trigger="['click']"
          @menu-event="handleMenuEvent"
          popconfirm
        >
          <a-button preIcon="ant-design:export-outlined">{{ `{{ t('common.exportText') }}` }}...</a-button>
        </Dropdown>
      </template>
      <template #bodyCell="{ column, record }">
        <template v-if="column.key === '{{.PkJsonField}}'{{- if not (.HasDetail) }} && false{{- end -}}">
          <TableAction
            :actions="[
              {
                icon: 'ant-design:info-circle-outlined',
                label: record.{{.PkJsonField}},
                tooltip: t('common.detailText'),
                onClick: handleView.bind(null, record),
              },
            ]"
          />
        </template>
        <template v-if="column.key === 'action'">
          <TableAction
            :actions="[
              {
                icon: 'ant-design:info-circle-outlined',
                tooltip: t('common.detailText'),
                onClick: handleView.bind(null, record),
                ifShow: {{ if (.HasDetail) -}}true{{- else -}}false{{- end -}},
              },
              {
                icon: 'ant-design:form-outlined',
                tooltip: t('common.editText'),
                onClick: handleEdit.bind(null, record),
                disabled: false,
                auth: '{{.PackageName}}:{{.BusinessName}}:edit',
              },
              {
                icon: 'ant-design:delete-outlined',
                tooltip: t('common.delText'),
                color: 'error',
                disabled: false,
                auth: '{{.PackageName}}:{{.BusinessName}}:remove',
                popConfirm: {
                  title: t('sys.app.deletePrompt'),
                  placement: 'left',
                  confirm: handleDelete.bind(null, record),
                },
              },
            ]"
          />
        </template>
      </template>
    </BasicTable>
    <EditModal @register="registerModal" @success="handleSuccess" />
    <DetailDrawer @register="registerDrawer" />
    <GenericExport ref="genericExportRef" :headers="excelHeader" />
  </div>
</template>
<script lang="ts" setup name="{{.ClassName}}">
  import { useI18n } from '/@/hooks/web/useI18n';
  import { BasicTable, useTable, TableAction } from '/@/components/Table';
  import { computed, ref, unref } from 'vue';
  import { GenericExport, GenericExportModalAction } from '/@/components/GenericExport';
  import { useModal } from '/@/components/Modal';
  import { useDrawer } from '/@/components/Drawer';
  import { Dropdown, DropMenu } from '/@/components/Dropdown';
  import { cloneDeep } from 'lodash-es';
  import { export2ExcelV2 } from '/@/utils/export2';
  import { columns, excelHeader, searchFormSchema } from './data';
  import EditModal from './EditModal.vue';
  import DetailDrawer from './DetailDrawer.vue';
  import {
    delete{{.ClassName}}Entry,
    get{{.ClassName}}List,
    get{{.ClassName}}ByKey,
  } from '/@/api/{{.PackageName}}/{{.ModuleFrontName}}';

  const { t } = useI18n();
  const genericExportRef = ref<Nullable<GenericExportModalAction>>(null);
  const [registerDrawer, { openDrawer }] = useDrawer();
  const [registerModal, { openModal }] = useModal();
  const [
    registerTable,
    { reload, getDataSource, getSelectRows, fetchOnly, updateTableDataRecord },
  ] = useTable({
    name: '{{.ClassName}}.MainTable',
    title: '{{.TableComment}}列表',
    api: get{{.ClassName}}List,
    columns,
    formConfig: {
      labelWidth: 100,
      baseColProps: { span: 6 },
      schemas: searchFormSchema,
    },
    striped: true,
    bordered: true,
    canResize: true,
    useSearchForm: true,
    showTableSetting: true,
    showIndexColumn: false,
    rowKey: '{{.PkJsonField}}',
    actionColumn: {
      width: 90,
      title: t('common.actionText'),
      dataIndex: 'action',
    },
  });

  const hasSelected = computed<boolean>(() => {
    try {
      return getSelectRows().length > 0;
    } catch {
      return false;
    }
  });

  function handleCreate() {
    openModal(true, {
      isUpdate: false,
    });
  }

  function handleEdit(record: Recordable) {
    openModal(true, {
      record,
      isUpdate: true,
    });
  }

  async function handleDelete(record: Recordable) {
    await delete{{.ClassName}}Entry(record);
    await reload();
  }

  async function handleSuccess(isUpdate: boolean, record: Recordable) {
    if (isUpdate) {
      const data = await get{{.ClassName}}ByKey(record.{{.PkJsonField}});
      updateTableDataRecord(record.{{.PkJsonField}}, data);
    } else {
      await reload();
    }
  }

  function handleView(record: Recordable) {
    openDrawer(true, {
      record,
    });
  }

  function handleMenuEvent(menu: DropMenu) {
    if (menu.event === 'selected' || menu.event === 'current') {
      handleExport(menu.event);
    }
  }

  function handleExport(event) {
    unref(genericExportRef)?.openModal(async (v) => {
      await _handleExport(event, v);
    }, '{{.ClassName}}.MainTable');
  }

  async function _handleExport(event, filteredHeaders: Recordable) {
    let data: any[] = [];
    switch (event) {
      case 'selected':
        data = cloneDeep(getSelectRows());
        break;
      case 'current':
        data = cloneDeep(getDataSource());
        break;
      case 'all':
        data = (await fetchOnly()) || [];
        break;
    }
    export2ExcelV2(filteredHeaders, columns, data, '{{.TableComment}}.xlsx');
  }
</script>
